@startuml

!define private(x) <i>x</i>
!define static(x) static x

package gson {}
package jsoup {}
class tsv.Tsv {
   String toTsv(T[])
   T[] fromTsv(String, Class)
}

class warehouse.LoadingDock {
   private(Item[] loadTsv(File))
   private(Item[] loadJson(File))
   private(Item[] loadHtml(File))
   private(void saveTsv(File, Inventory))
   private(void saveJson(File, Inventory))
   private(void saveHtml(File, Inventory))
   private(void saveTsv(File,  Iterator<Item>))
   private(void saveJson(File, Iterator<Item>))
   private(void saveHtml(File, Iterator<Item>))
   ---
   Item[] load(File)
   void save(File, Item[])
   void save(File, Iterator<Item>)
}

class warehouse.Item {
   Item()
   Item(String, String, String)
   ---
   private(String value)
   private(String serial)
   private(String name)
   ---
   Item clone()
   String getValue()
   String getSerial()
   String getName()
   boolean isValidValue()
   boolean isValidName()
   boolean isValidSerial()
   boolean isValidItem()
}

class warehouse.Inventory {
   Inventory()
   Inventory(Item[])
   ---
   <i>Map<String, Item> items</i>
   ---
   boolean add(Item)
   boolean has(Item)
   Iterator<Item> snapshot()
}

class warehouse.Warehouse {
   private(File lastFile)
   private(Inventory inventory)
   ---
   boolean add(Item item)
   boolean has(Item item)
   boolean update(Item from, Item to)
   Iterator<Item> snapshot()
   void load(File)
   void saveAs(File)
   void save()
   void new()
}

component gui {
}

warehouse.Inventory --> warehouse.Item
warehouse.LoadingDock --> tsv
warehouse.LoadingDock --> gson
warehouse.LoadingDock --> jsoup

warehouse.Warehouse --> warehouse.LoadingDock
warehouse.Warehouse --> warehouse.Inventory

gui --> warehouse.Warehouse
gui --> warehouse.Item

@enduml